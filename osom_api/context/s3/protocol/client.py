# -*- coding: utf-8 -*-

from typing import Any, BinaryIO, Callable, Dict, Optional, Protocol

from boto3.s3.transfer import S3Transfer, TransferConfig

ALLOWED_DOWNLOAD_ARGS = S3Transfer.ALLOWED_DOWNLOAD_ARGS
ALLOWED_UPLOAD_ARGS = S3Transfer.ALLOWED_UPLOAD_ARGS


class Client(Protocol):
    def abort_multipart_upload(self, **kwargs) -> Dict[str, Any]:
        """
        This operation aborts a multipart upload.
        """
        ...

    def can_paginate(self, operation_name: str) -> bool:
        """
        Check if an operation can be paginated.
        """
        ...

    def close(self) -> None:
        """
        Closes underlying endpoint connections.
        """
        ...

    # def complete_multipart_upload(self, *args, **kwargs): ...
    # def copy(self, *args, **kwargs): ...
    # def copy_object(self, *args, **kwargs): ...
    # def create_bucket(self, *args, **kwargs): ...
    # def create_multipart_upload(self, *args, **kwargs): ...
    # def create_session(self, *args, **kwargs): ...
    # def delete_bucket(self, *args, **kwargs): ...
    # def delete_bucket_analytics_configuration(self, *args, **kwargs): ...
    # def delete_bucket_cors(self, *args, **kwargs): ...
    # def delete_bucket_encryption(self, *args, **kwargs): ...
    # def delete_bucket_intelligent_tiering_configuration(self, *args, **kwargs): ...
    # def delete_bucket_inventory_configuration(self, *args, **kwargs): ...
    # def delete_bucket_lifecycle(self, *args, **kwargs): ...
    # def delete_bucket_metrics_configuration(self, *args, **kwargs): ...
    # def delete_bucket_ownership_controls(self, *args, **kwargs): ...
    # def delete_bucket_policy(self, *args, **kwargs): ...
    # def delete_bucket_replication(self, *args, **kwargs): ...
    # def delete_bucket_tagging(self, *args, **kwargs): ...
    # def delete_bucket_website(self, *args, **kwargs): ...

    def delete_object(self, **kwargs) -> Dict[str, Any]:
        """
        Removes an object from a bucket.
        """
        ...

    # def delete_object_tagging(self, *args, **kwargs): ...
    # def delete_objects(self, *args, **kwargs): ...
    # def delete_public_access_block(self, *args, **kwargs): ...

    def download_file(
        self,
        Bucket: str,
        Key: str,
        Filename: str,
        ExtraArgs: Optional[Dict[str, Any]] = None,
        Callback: Optional[Callable] = None,
        Config: Optional[TransferConfig] = None,
    ) -> None:
        """
        Download an S3 object to a file.
        """
        ...

    def download_fileobj(
        self,
        Bucket: str,
        Key: str,
        Fileobj: BinaryIO,
        ExtraArgs: Optional[Dict[str, Any]] = None,
        Callback: Optional[Callable] = None,
        Config: Optional[TransferConfig] = None,
    ) -> None:
        """
        Download an object from S3 to a file-like object.
        """
        ...

    # def exceptions(self, *args, **kwargs): ...
    # def generate_presigned_post(self, *args, **kwargs): ...

    def generate_presigned_url(
        self,
        ClientMethod: str,
        Params: Optional[Dict[str, Any]] = None,
        ExpiresIn=3600,
        HttpMethod: Optional[str] = None,
    ) -> str:
        """
        Generate a presigned url given a client, its method, and arguments
        """
        ...

    # def get_bucket_accelerate_configuration(self, *args, **kwargs): ...
    # def get_bucket_acl(self, *args, **kwargs): ...
    # def get_bucket_analytics_configuration(self, *args, **kwargs): ...
    # def get_bucket_cors(self, *args, **kwargs): ...
    # def get_bucket_encryption(self, *args, **kwargs): ...
    # def get_bucket_intelligent_tiering_configuration(self, *args, **kwargs): ...
    # def get_bucket_inventory_configuration(self, *args, **kwargs): ...
    # def get_bucket_lifecycle(self, *args, **kwargs): ...
    # def get_bucket_lifecycle_configuration(self, *args, **kwargs): ...
    # def get_bucket_location(self, *args, **kwargs): ...
    # def get_bucket_logging(self, *args, **kwargs): ...
    # def get_bucket_metrics_configuration(self, *args, **kwargs): ...
    # def get_bucket_notification(self, *args, **kwargs): ...
    # def get_bucket_notification_configuration(self, *args, **kwargs): ...
    # def get_bucket_ownership_controls(self, *args, **kwargs): ...
    # def get_bucket_policy(self, *args, **kwargs): ...
    # def get_bucket_policy_status(self, *args, **kwargs): ...
    # def get_bucket_replication(self, *args, **kwargs): ...
    # def get_bucket_request_payment(self, *args, **kwargs): ...
    # def get_bucket_tagging(self, *args, **kwargs): ...
    # def get_bucket_versioning(self, *args, **kwargs): ...
    # def get_bucket_website(self, *args, **kwargs): ...

    def get_object(self, **kwargs) -> Dict[str, Any]:
        """
        Retrieves an object from Amazon S3.
        """
        ...

    # def get_object_acl(self, *args, **kwargs): ...
    # def get_object_attributes(self, *args, **kwargs): ...
    # def get_object_legal_hold(self, *args, **kwargs): ...
    # def get_object_lock_configuration(self, *args, **kwargs): ...
    # def get_object_retention(self, *args, **kwargs): ...
    # def get_object_tagging(self, *args, **kwargs): ...
    # def get_object_torrent(self, *args, **kwargs): ...
    # def get_paginator(self, *args, **kwargs): ...
    # def get_public_access_block(self, *args, **kwargs): ...
    # def get_waiter(self, *args, **kwargs): ...
    # def head_bucket(self, *args, **kwargs): ...

    def head_object(self, **kwargs) -> Dict[str, Any]:
        """
        The HEAD operation retrieves metadata from an object without returning the
        object itself. This operation is useful if youâ€™re interested only in an
        object's metadata.
        """
        ...

    # def list_bucket_analytics_configurations(self, *args, **kwargs): ...
    # def list_bucket_intelligent_tiering_configurations(self, *args, **kwargs): ...
    # def list_bucket_inventory_configurations(self, *args, **kwargs): ...
    # def list_bucket_metrics_configurations(self, *args, **kwargs): ...

    def list_buckets(self) -> Dict[str, Any]:
        """
        Returns a list of all buckets owned by the authenticated sender of the request.
        """
        ...

    # def list_directory_buckets(self, *args, **kwargs): ...
    # def list_multipart_uploads(self, *args, **kwargs): ...
    # def list_object_versions(self, *args, **kwargs): ...

    def list_objects(self, **kwargs) -> Dict[str, Any]:
        """
        Returns some or all (up to 1,000) of the objects in a bucket.
        """
        ...

    # def list_objects_v2(self, *args, **kwargs): ...
    # def list_parts(self, *args, **kwargs): ...
    # def meta(self, *args, **kwargs): ...
    # def put_bucket_accelerate_configuration(self, *args, **kwargs): ...
    # def put_bucket_acl(self, *args, **kwargs): ...
    # def put_bucket_analytics_configuration(self, *args, **kwargs): ...
    # def put_bucket_cors(self, *args, **kwargs): ...
    # def put_bucket_encryption(self, *args, **kwargs): ...
    # def put_bucket_intelligent_tiering_configuration(self, *args, **kwargs): ...
    # def put_bucket_inventory_configuration(self, *args, **kwargs): ...
    # def put_bucket_lifecycle(self, *args, **kwargs): ...
    # def put_bucket_lifecycle_configuration(self, *args, **kwargs): ...
    # def put_bucket_logging(self, *args, **kwargs): ...
    # def put_bucket_metrics_configuration(self, *args, **kwargs): ...
    # def put_bucket_notification(self, *args, **kwargs): ...
    # def put_bucket_notification_configuration(self, *args, **kwargs): ...
    # def put_bucket_ownership_controls(self, *args, **kwargs): ...
    # def put_bucket_policy(self, *args, **kwargs): ...
    # def put_bucket_replication(self, *args, **kwargs): ...
    # def put_bucket_request_payment(self, *args, **kwargs): ...
    # def put_bucket_tagging(self, *args, **kwargs): ...
    # def put_bucket_versioning(self, *args, **kwargs): ...
    # def put_bucket_website(self, *args, **kwargs): ...
    # def put_object(self, *args, **kwargs): ...
    # def put_object_acl(self, *args, **kwargs): ...
    # def put_object_legal_hold(self, *args, **kwargs): ...
    # def put_object_lock_configuration(self, *args, **kwargs): ...
    # def put_object_retention(self, *args, **kwargs): ...
    # def put_object_tagging(self, *args, **kwargs): ...
    # def put_public_access_block(self, *args, **kwargs): ...
    # def restore_object(self, *args, **kwargs): ...
    # def select_object_content(self, *args, **kwargs): ...

    def upload_file(
        self,
        Filename: str,
        Bucket: str,
        Key: str,
        ExtraArgs: Optional[Dict[str, Any]] = None,
        Callback: Optional[Callable] = None,
        Config: Optional[TransferConfig] = None,
    ) -> None:
        """
        Upload a file to an S3 object.
        """
        ...

    def upload_fileobj(
        self,
        Fileobj: BinaryIO,
        Bucket: str,
        Key: str,
        ExtraArgs: Optional[Dict[str, Any]] = None,
        Callback: Optional[Callable] = None,
        Config: Optional[TransferConfig] = None,
    ) -> None:
        """
        Upload a file-like object to S3.
        """
        ...

    # def upload_part(self, *args, **kwargs): ...
    # def upload_part_copy(self, *args, **kwargs): ...
    # def waiter_names(self, *args, **kwargs): ...
    # def write_get_object_response(self, *args, **kwargs): ...
